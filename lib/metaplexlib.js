import {
  Metaplex,
  bundlrStorage,
  walletAdapterIdentity,
} from "@metaplex-foundation/js";
import { Connection, PublicKey, clusterApiUrl, Keypair } from "@solana/web3.js";
import base58 from "bs58";
const SOLANA_NETWORK = process.env.NEXT_PUBLIC_SOLANA_NETWORK;
const PRIVATE_KEY = process.env.PRIVATE_KEY;

const metaplexlib = {};

metaplexlib.createNFT = async (nftData) => {
  try {
    const connection = new Connection(clusterApiUrl(SOLANA_NETWORK));
    const metaplex = new Metaplex(connection);

    const { publicKey: walletPublicKey, output, stats, explorerLink } = nftData;

    const { name, race, gender, class: _class } = stats;

    //image url is a replicate url with an image
    // lets convert that to file base64 to uplaod to arweave

    //get image from url
    const imageUrl = output[0];
    const imageFetch = await fetch(imageUrl);
    const imageBlob = await imageFetch.blob();

    // Using private key in backend to sign the transaction for uploading the metadata.
    const privateKey = Uint8Array.from(base58.decode(PRIVATE_KEY));
    const keypair = Keypair.fromSecretKey(privateKey);

    console.log(`keypair created: ${keypair.publicKey.toString()}`);
    metaplex.use(walletAdapterIdentity(keypair));
    console.log("Using key");

    metaplex.use(
      bundlrStorage({
        address: "https://devnet.bundlr.network",
        providerUrl: "https://api.devnet.solana.com",
        timeout: 60000,
        identity: keypair,
      })
    );
    console.log("Uploading");

    //prepare metada to upload to arweave
    const metadata = {
      name,
      description: `${name} the ${race} ${gender} ${_class} generated by Soles & Dragons Website `,
      image: imageUrl,
      symbol: "M-NFT",
    };

    const data = await metaplex.nfts().uploadMetadata(metadata);

    console.log("Metadata uploaded", data);

    return metadata;
  } catch (error) {
    console.error(error);
    throw error;
  }
};

export default metaplexlib;
